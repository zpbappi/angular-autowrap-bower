"use strict";!function(t){t.module("angular-autowrap-internal",[]),t.module("angular-autowrap",["angular-autowrap-internal"])}(angular),function(t){t.module("angular-autowrap").directive("autowrap",["autowrapController","autowrapLinker",function(t,a){return{restrict:"A",require:["?^form","?ngModel"],scope:{config:"=autowrapConfig",theme:"@autowrapTheme",templateFor:"@autowrapTemplateFor",validators:"=autowrapValidators"},controller:["$scope",function(a){t.init(a)}],link:function(t,e,r,n){a.init(t,e,r,n[0],n[1])}}}])}(angular),function(t){t.module("angular-autowrap").value("autowrapConfig",{auto:{wrapperClass:"auto-wrapper",messageClass:"auto-wrapper-message",applyStatesToWrapper:!0},dirtyStateClass:"dirty",validStateClass:"valid",invalidStateClass:"invalid",applyStatesToInput:!1,noTrack:!1})}(angular),function(t){t.module("angular-autowrap-internal").constant("customObjectPropertyPrefix","autowrapCustom").constant("validationMessagePropertyPrefix","autowrapMsg").constant("templatePathBase","autowrap-templates/").constant("defaultTemplateName","default")}(angular),function(t){t.module("angular-autowrap-internal").factory("autowrapController",[function(){return{init:function(t){t._dirty=!1,t._valid=!1,t._invalid=!1,t._message="",t.custom={},t.isDirty=function(){return t._dirty},t.isValid=function(){return t._valid},t.isInvalid=function(){return t._invalid},t.validationMessage=function(){return t._message}}}}])}(angular),function(t){t.module("angular-autowrap-internal").factory("autowrapCustomPropertyHelper",["autowrapUtility","customObjectPropertyPrefix",function(a,e){return{isCustomProperty:function(t){return t?0===t.indexOf(e)&&t.length>e.length&&a.isUpperCase(t.substr(e.length,1)):!1},getCustomPropertyName:function(a){var r=e.length;return t.lowercase(a[r])+a.substr(r+1)}}}])}(angular),function(t){t.module("angular-autowrap-internal").factory("autowrapLinkerHelper",[function(){return{getErrorTypes:function(a){if(!a)return[];var e=[];return t.forEach(a.$error,function(t,a){t&&(e[e.length]=a)}),e},setWatch:function(t,a,e,r,n,o,i){t[n]=a[e][r],t.$watch(function(){return a[e][r]},function(a,e){t[n]=a,"function"==typeof o&&o.apply(i||null,[a,e])})},enableAddingStateClassesToInputElement:function(t,a,e){t.$watch(function(){return t.isDirty()?a.addClass(e.dirtyStateClass):a.removeClass(e.dirtyStateClass),t.isValid()?a.addClass(e.validStateClass):a.removeClass(e.validStateClass),t.isInvalid()?a.addClass(e.invalidStateClass):a.removeClass(e.invalidStateClass),!0})}}}])}(angular),function(t){t.module("angular-autowrap-internal").factory("autowrapLinker",["$compile","autowrapConfig","autowrapLinkerHelper","autowrapCustomPropertyHelper","autowrapTemplateProvider","autowrapUtility","validationMessagePropertyPrefix",function(a,e,r,n,o,i,u){return{init:function(l,s,p,f,d){var c={};t.forEach(p,function(t,a){n.isCustomProperty(a)&&(c[n.getCustomPropertyName(a)]=t)}),t.extend(l.custom,c);var m=t.extend({},e,l.config);t.isDefined(p.autowrapNoTrack)&&(m.noTrack=!0);var v=o.get(l.templateFor||s[0].tagName,l.theme),g=t.element(a(v)(l));s.after(g);var w=g.find("placeholder");if(w.after(s),w.remove(),m.noTrack!==!0){var y=s[0].name;if(!y)throw"The element must have a name attribute for the validation to work.";if(null===f)throw"The element, applied 'autowrap' directive, must be placed inside form (or, ngForm) to work for validation messages.\nIf this is not a form element that needs tracking of validation status, just add 'autowrap-no-track' property to the element.";if("object"==typeof l.validators&&i.hasAnyProperty(l.validators)){if(null===d)throw"To use custom validators with 'autowrap', the element must have ngModel directive applied to it.";t.forEach(l.validators,function(t,a){d.$validators[a]=t})}r.setWatch(l,f,y,"$dirty","_dirty"),r.setWatch(l,f,y,"$valid","_valid",function(t){t&&(l._message="")}),r.setWatch(l,f,y,"$invalid","_invalid",function(a){if(a){var e=r.getErrorTypes(f[y]).map(function(t){return i.getCamelCasedAttributeName(t,u)}),n=i.filter(e,function(a){return t.isDefined(p[a])}).map(function(t){return p[t]});l._message=n.length?n[0]:"Invalid."}}),m.applyStatesToInput===!0&&r.enableAddingStateClassesToInputElement(l,s,m)}}}}])}(angular),function(t){t.module("angular-autowrap").factory("autowrapTemplateProvider",["$templateCache","autowrapConfig","templatePathBase","defaultTemplateName",function(a,e,r,n){var o=function(a){return t.isDefined(a)&&"string"==typeof a&&a.length},i=function(t){var e=a.get(t);return o(e)},u=function(t,a){var e=r;return o(a)&&(e+=a.toLowerCase()+"/"),e+=o(t)?t.toLowerCase():n,e+".html"},l=u(void 0,void 0),s="data-ng-class=\"{'"+e.dirtyStateClass+"': isDirty(), '"+e.validStateClass+"': isValid(), '"+e.invalidStateClass+"': isInvalid()}\"",p='<div class="'+e.auto.wrapperClass+'" '+(e.auto.applyStatesToWrapper?s:"")+'><placeholder /><span class="'+e.auto.messageClass+'">{{validationMessage()}}</span></div>';return a.put(l,p),{get:function(t,e){for(var r=o(t)?t:void 0,n=o(e)?e:void 0,l=[u(r,n),u(void 0,n),u(r,void 0),u(void 0,void 0)],s=0;s<l.length;s++)if(i(l[s]))return a.get(l[s]);return p},put:function(t,e,r){if(t){var n=u(e,r);a.put(n,t)}}}}])}(angular),function(t){t.module("angular-autowrap-internal").factory("autowrapUtility",["$filter",function(a){return{filter:function(t,e,r){return a("filter")(t,e,r)},getCamelCasedAttributeName:function(a,e){if(!a)return a;var r=a.split("-").map(function(a){return t.uppercase(a.substring(0,1))+a.substring(1)}).join("");return e?e+r:t.lowercase(r[0])+r.substring(1)},isUpperCase:function(a){return a?t.uppercase(a)===a:!1},hasAnyProperty:function(t){if(!t)return!1;for(var a in t)if(t.hasOwnProperty(a))return!0;return!1}}}])}(angular);
//# sourceMappingURL=angular-autowrap.min.js.map